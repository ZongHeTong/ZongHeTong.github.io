    learn to classify movie reviews as positive or negative, based on the text content of the reviews. 
    IMDB dataset: a set of 50,000 highly polarized reviews from the Internet Movie Database. Theyâ€™re split into 25,000 reviews for 
training and 25,000 reviews for testing, each set consisting of 50% negative and 50% positive reviews.
    The code:
from keras.datasets import imdb
from keras import models
from keras import layers
import numpy as np
import matplotlib.pyplot as plt

#decode reviews back to English words
(train_data, train_labels), (test_data, test_labels) = imdb.load_data(num_words=10000)
word_index = imdb.get_word_index()   #word_index is a dictionary mapping words to an integer index. 
reverse_word_index = dict([(value,key) for (key, value) in word_index.items()])     #Reverses it, mapping integer indices to words 
deoded_review = ' '.join([reverse_word_index.get(i-3, '?') for i in train_data[0]])

#Encoding the integer sequences into a binary matrix
def vectorize_sequences(sequences, dimension=10000):
    results = np.zeros((len(sequences), dimension))
    for i, sequence in enumerate(sequences):
        results[i, sequence] = 1.           #Sets specific indices of results[i] to 1s 
    return results
x_train = vectorize_sequences(train_data)
x_test = vectorize_sequences(test_data)
y_train = np.asarray(train_labels).astype('float32')
y_test = np.asarray(test_labels).astype('float32')
#print(x_train[0])

model = models.Sequential()
model.add(layers.Dense(16, activation='relu', input_shape=(10000,)))
model.add(layers.Dense(16, activation='relu'))
model.add(layers.Dense(1,activation='sigmoid'))

model.compile(optimizer='rmsprop',
              loss='binary_crossentropy',
              metrics=['accuracy'])

#Setting aside a validation set
x_val = x_train[0 : 10000]
partial_x_train = x_train[10000 : ]
y_val = y_train[0 : 10000]
partial_y_train = y_train[10000 : ]

history = model.fit(partial_x_train,
                    partial_y_train,
                    epochs=10,
                    batch_size=512,
                    validation_data=(x_val, y_val))

#Plotting the training and validation loss
#history_dict = history.history
#loss_values = history_dict['loss']
#val_loss_values = history_dict['val_loss']
#epochs = range(1, len(acc) + 1)
#plt.plot(epochs, loss_values, 'bo', label='Training loss')
#plt.plot(epochs, val_loss_values, 'b', label='Validation loss')
#plt.title('Training and validation loss')
#plt.xlabel('Epochs')
#plt.ylabel('Loss')
#plt.legend()
#plt.show()
print(model.predict(x_test))
